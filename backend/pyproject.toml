[project]
name = "scholaria"
version = "0.1.0"
description = "School Integrated RAG System - MVP-first, TDD-driven development"
# readme = "README.md"  # Disabled for Docker builds
authors = [
    { name = "Kang, Donguk", email = "kangdongouk@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-multipart>=0.0.20",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "celery>=5.3.0",
    "redis[hiredis]>=5.0.0",
    "psycopg[binary]>=3.1.0",
    "qdrant-client>=1.6.0",
    "openai>=1.0.0",
    "docling>=1.0.0",
    "llama-index>=0.9.0",
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",
    "python-dotenv>=1.0.0",
    "korean-romanizer>=0.28.0",
    "pytest>=7.4.0",
    "pytest-xdist>=3.0.0",
    "pytest-celery>=0.0.0",
    "pytest-anyio>=0.0.0",
    "httpx>=0.27.0",
    "factory-boy>=3.3.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "mypy>=1.8.0",
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",
    "email-validator>=2.3.0",
    "sse-starlette>=3.0.2",
    "playwright>=1.55.0",
    "opentelemetry-api>=1.37.0",
    "opentelemetry-sdk>=1.37.0",
    "opentelemetry-instrumentation-fastapi>=0.58b0",
    "opentelemetry-instrumentation-httpx>=0.58b0",
    "opentelemetry-instrumentation-redis>=0.58b0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.37.0",
    "opentelemetry-exporter-prometheus>=0.58b0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["auth", "dependencies", "ingestion", "models", "retrieval", "routers", "schemas", "services", "tasks"]
include = ["*.py"]

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88
extend-exclude = [
    "migrations",
    ".venv",
    "venv",
    "alembic/env.py",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by line-length)
    "B008",  # do not perform function calls in argument defaults
    "F403",  # star imports (common in Django settings)
    "F405",  # undefined names from star imports
]

[tool.ruff.lint.isort]
known-first-party = ["backend"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

# MyPy configuration
[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_unreachable = true

# FastAPI-specific settings
# No plugins needed for FastAPI

# Per-module mypy settings
[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "qdrant_client.*",
    "docling.*",
    "sentence_transformers.*",
    "llama_index.*",
    "minio.*",
    "redis.*",
]
ignore_missing_imports = true

[dependency-groups]
dev = [
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
]

[tool.pytest.ini_options]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests"]
addopts = [
    "--tb=short",
    "--strict-markers",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
filterwarnings = [
    "ignore::DeprecationWarning:anyio._backends._asyncio",
    "ignore::DeprecationWarning:_pytest.python",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
    "golden: marks tests as golden dataset validation",
    "asyncio: marks tests as async tests",
]
