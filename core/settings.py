"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-f+=br0u!^3%$^^^3(iodi37msa-*8@zo3q7tb%73^5&v4lbo(l"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: list[str] = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rag",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Redis Configuration
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
try:
    REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
except ValueError:
    REDIS_PORT = 6379

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.getenv("DB_NAME", "scholaria"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "postgres"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}

# Cache Configuration
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery Configuration
CELERY_BROKER_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("REDIS_URL", "redis://localhost:6379/0")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Qdrant Configuration
QDRANT_HOST = os.getenv("QDRANT_HOST", "localhost")
try:
    QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))
except ValueError:
    QDRANT_PORT = 6333
QDRANT_COLLECTION_NAME = os.getenv("QDRANT_COLLECTION_NAME", "scholaria_documents")

# MinIO Configuration
MINIO_ENDPOINT = os.getenv("MINIO_ENDPOINT", "localhost:9000")
MINIO_ACCESS_KEY = os.getenv("MINIO_ACCESS_KEY", "minioadmin")
MINIO_SECRET_KEY = os.getenv("MINIO_SECRET_KEY", "minioadmin")
MINIO_BUCKET_NAME = os.getenv("MINIO_BUCKET_NAME", "scholaria-docs")
MINIO_SECURE = os.getenv("MINIO_SECURE", "False").lower() == "true"

# File Validation Configuration
try:
    FILE_VALIDATION_MAX_SIZE = int(
        os.getenv("FILE_VALIDATION_MAX_SIZE", str(10 * 1024 * 1024))
    )
except ValueError:
    FILE_VALIDATION_MAX_SIZE = 10 * 1024 * 1024  # 10MB default

FILE_VALIDATION_SUPPORTED_TYPES = {
    "pdf": {
        "extensions": [".pdf"],
        "content_types": ["application/pdf"],
        "magic_bytes": [b"%PDF-"],
    },
    "markdown": {
        "extensions": [".md", ".markdown"],
        "content_types": ["text/markdown", "text/x-markdown"],
        "magic_bytes": [],  # No specific magic bytes for markdown
    },
    "text": {
        "extensions": [".txt"],
        "content_types": ["text/plain"],
        "magic_bytes": [],  # No specific magic bytes for plain text
    },
}

FILE_VALIDATION_EXECUTABLE_EXTENSIONS = [
    # Windows executables
    "exe",
    "bat",
    "cmd",
    "com",
    "pif",
    "scr",
    "vbs",
    "msi",
    "ps1",
    # Scripting languages
    "js",
    "jar",
    "py",
    "rb",
    "pl",
    "sh",
    # Libraries and objects
    "dll",
    "so",
]

# OpenAI Configuration
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
try:
    OPENAI_EMBEDDING_DIM = int(os.getenv("OPENAI_EMBEDDING_DIM", "3072"))
except ValueError:
    OPENAI_EMBEDDING_DIM = 3072
OPENAI_EMBEDDING_MODEL = os.getenv("OPENAI_EMBEDDING_MODEL", "text-embedding-3-large")
OPENAI_CHAT_MODEL = os.getenv("OPENAI_CHAT_MODEL", "gpt-4o-mini")
try:
    OPENAI_CHAT_TEMPERATURE = float(os.getenv("OPENAI_CHAT_TEMPERATURE", "0.3"))
except ValueError:
    OPENAI_CHAT_TEMPERATURE = 0.3
try:
    OPENAI_CHAT_MAX_TOKENS = int(os.getenv("OPENAI_CHAT_MAX_TOKENS", "1000"))
except ValueError:
    OPENAI_CHAT_MAX_TOKENS = 1000

# LlamaIndex caching configuration
LLAMAINDEX_CACHE_ENABLED = (
    os.getenv("LLAMAINDEX_CACHE_ENABLED", "false").lower() == "true"
)
LLAMAINDEX_CACHE_DIR = Path(
    os.getenv("LLAMAINDEX_CACHE_DIR", str(BASE_DIR / "storage" / "llamaindex_cache"))
)
LLAMAINDEX_CACHE_NAMESPACE = os.getenv(
    "LLAMAINDEX_CACHE_NAMESPACE", "scholaria-default"
)

# RAG Configuration
try:
    RAG_SEARCH_LIMIT = int(os.getenv("RAG_SEARCH_LIMIT", "10"))
except ValueError:
    RAG_SEARCH_LIMIT = 10
try:
    RAG_RERANK_TOP_K = int(os.getenv("RAG_RERANK_TOP_K", "5"))
except ValueError:
    RAG_RERANK_TOP_K = 5

# Unstructured API Configuration
UNSTRUCTURED_API_URL = os.getenv("UNSTRUCTURED_API_URL", "http://localhost:8000")

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "EXCEPTION_HANDLER": "rag.exceptions.custom_exception_handler",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",
        "user": "1000/hour",
        "rag_questions": "30/min",  # Special rate limit for RAG questions
    },
}
