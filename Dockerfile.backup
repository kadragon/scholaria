# Backup service Dockerfile for Scholaria
FROM alpine:3.18

# Install required packages
RUN apk add --no-cache \
    bash \
    curl \
    postgresql16-client \
    redis \
    gzip \
    findutils \
    coreutils \
    docker-cli \
    dcron \
    tzdata \
    jq \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=Asia/Seoul
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create backup user
RUN addgroup -g 1000 backup && \
    adduser -D -s /bin/bash -u 1000 -G backup backup

# Create directories
RUN mkdir -p /backup /var/log/scholaria /scripts && \
    chown -R backup:backup /backup /var/log/scholaria /scripts

# Copy backup scripts
COPY scripts/backup.sh /scripts/
COPY scripts/restore.sh /scripts/
COPY scripts/backup-scheduler.sh /scripts/

# Make scripts executable
RUN chmod +x /scripts/*.sh && \
    chown -R backup:backup /scripts

# Create cron directory and set permissions
RUN mkdir -p /var/spool/cron/crontabs && \
    chown -R backup:backup /var/spool/cron

# Create entrypoint script
RUN cat > /entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Initialize logging
mkdir -p /var/log/scholaria
chown backup:backup /var/log/scholaria

# Set up cron jobs as backup user
if [ "$1" = "scheduler" ]; then
    echo "Setting up backup scheduler..."

    # Create crontab for backup user
    cat > /var/spool/cron/crontabs/backup << CRONEOF
# Scholaria Database Backup Schedule
# Daily backup at 2 AM
0 2 * * * /scripts/backup-scheduler.sh daily >> /var/log/scholaria/scheduler.log 2>&1

# Weekly backup on Sunday at 3 AM
0 3 * * 0 /scripts/backup-scheduler.sh weekly >> /var/log/scholaria/scheduler.log 2>&1

# Monthly backup on 1st day at 4 AM
0 4 1 * * /scripts/backup-scheduler.sh monthly >> /var/log/scholaria/scheduler.log 2>&1

# Health check every 6 hours
0 */6 * * * /scripts/backup-scheduler.sh health-check >> /var/log/scholaria/scheduler.log 2>&1
CRONEOF

    chown backup:backup /var/spool/cron/crontabs/backup
    chmod 600 /var/spool/cron/crontabs/backup

    # Start crond and keep container running
    echo "Starting cron daemon..."
    crond -l 2 -f

elif [ "$1" = "backup" ]; then
    # Manual backup execution
    shift
    exec su-exec backup /scripts/backup.sh "$@"

elif [ "$1" = "restore" ]; then
    # Manual restore execution
    shift
    exec su-exec backup /scripts/restore.sh "$@"

elif [ "$1" = "health-check" ]; then
    # Health check execution
    exec su-exec backup /scripts/backup-scheduler.sh health-check

elif [ "$1" = "status" ]; then
    # Status check execution
    exec su-exec backup /scripts/backup-scheduler.sh status

else
    # Default: run as backup user
    exec su-exec backup "$@"
fi
EOF

chmod +x /entrypoint.sh

# Install su-exec for user switching
RUN apk add --no-cache su-exec

# Switch to backup user for better security
USER backup

# Set working directory
WORKDIR /scripts

# Default command
ENTRYPOINT ["/entrypoint.sh"]
CMD ["scheduler"]
