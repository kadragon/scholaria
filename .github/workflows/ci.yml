name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: "3.13"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
        test-group: [
          "models",
          "views",
          "tasks",
          "admin",
          "ingestion",
          "core"
        ]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: scholaria_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Restore uv cache
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv pip install pytest-github-actions-annotate-failures

    - name: Set up environment variables
      run: |
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DB_ENGINE=django.db.backends.postgresql" >> $GITHUB_ENV
        echo "DB_NAME=scholaria_test" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
        echo "TESTING=True" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        uv run python manage.py migrate --settings=core.test_settings

    - name: Run tests for ${{ matrix.test-group }}
      run: |
        case "${{ matrix.test-group }}" in
          "models")
            uv run python manage.py test rag.tests.test_models --settings=core.test_settings --parallel auto
            ;;
          "views")
            uv run python manage.py test rag.tests.test_views --settings=core.test_settings --parallel auto
            ;;
          "tasks")
            uv run python manage.py test rag.tests.test_tasks --settings=core.test_settings --parallel auto
            ;;
          "admin")
            uv run python manage.py test rag.tests.test_admin* --settings=core.test_settings --parallel auto
            ;;
          "ingestion")
            uv run python manage.py test rag.tests.test_ingestion rag.tests.test_parsers --settings=core.test_settings --parallel auto
            ;;
          "core")
            uv run python manage.py test core.tests --settings=core.test_settings --parallel auto
            ;;
        esac

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.test-group }}-${{ matrix.python-version }}
        path: |
          test-results/
          coverage.xml

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Restore uv cache
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: uv sync --dev

    - name: Run linting (ruff)
      run: |
        uv run ruff check . --output-format=github
        uv run ruff format --check .

    - name: Run type checking (mypy)
      run: |
        uv run mypy . --no-error-summary

    - name: Check security issues (bandit)
      run: |
        uv pip install bandit[toml]
        uv run bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          cat bandit-report.json
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: scholaria_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      qdrant:
        image: qdrant/qdrant:v1.7.4
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Set up environment variables
      run: |
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-integration" >> $GITHUB_ENV
        echo "DB_ENGINE=django.db.backends.postgresql" >> $GITHUB_ENV
        echo "DB_NAME=scholaria_test" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "QDRANT_HOST=localhost" >> $GITHUB_ENV
        echo "QDRANT_PORT=6333" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 2; done'
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 2; done'

    - name: Run integration tests
      run: |
        uv run python manage.py migrate --settings=core.integration_settings
        uv run python manage.py test rag.tests.test_integration --settings=core.integration_settings -v 2

    - name: Test health checks
      run: |
        uv run python manage.py runserver --settings=core.integration_settings &
        SERVER_PID=$!
        sleep 10

        # Test basic health check
        curl -f http://localhost:8000/health/ || exit 1

        # Test detailed health check
        curl -f http://localhost:8000/health/detailed/ || exit 1

        kill $SERVER_PID

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: scholaria_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Set up environment variables
      run: |
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-performance" >> $GITHUB_ENV
        echo "DB_ENGINE=django.db.backends.postgresql" >> $GITHUB_ENV
        echo "DB_NAME=scholaria_test" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV

    - name: Run performance benchmarks
      run: |
        uv run python manage.py migrate --settings=core.test_settings
        uv run python manage.py test rag.tests.test_performance_benchmarks --settings=core.test_settings -v 2

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          performance-results/
          benchmark-*.json

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build production Docker image
      run: |
        docker build -f Dockerfile.prod -t scholaria:ci-test .

    - name: Test Docker image
      run: |
        # Start services
        docker run -d --name postgres-test -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=scholaria_test -p 5432:5432 postgres:16-alpine
        docker run -d --name redis-test -p 6379:6379 redis:7-alpine

        sleep 10

        # Test the application container
        docker run --rm --network host \
          -e DEBUG=False \
          -e SECRET_KEY=test-secret \
          -e DB_HOST=localhost \
          -e DB_NAME=scholaria_test \
          -e DB_USER=postgres \
          -e DB_PASSWORD=postgres \
          -e REDIS_URL=redis://localhost:6379/0 \
          scholaria:ci-test python manage.py check --settings=core.production_settings

        # Cleanup
        docker stop postgres-test redis-test
        docker rm postgres-test redis-test

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, code-quality, integration-tests, build-check]
    if: always()

    steps:
    - name: Check results
      run: |
        echo "Test Results: ${{ needs.test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Build Check: ${{ needs.build-check.result }}"

        if [[ "${{ needs.test.result }}" == "failure" ||
              "${{ needs.code-quality.result }}" == "failure" ||
              "${{ needs.integration-tests.result }}" == "failure" ||
              "${{ needs.build-check.result }}" == "failure" ]]; then
          echo "❌ CI Pipeline Failed"
          exit 1
        else
          echo "✅ CI Pipeline Passed"
        fi
