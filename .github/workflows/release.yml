name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.13"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          version="${{ github.event.inputs.version }}"
        else
          version="${GITHUB_REF#refs/tags/}"
        fi

        echo "version=$version" >> $GITHUB_OUTPUT

        # Check if this is a pre-release (contains alpha, beta, rc)
        if [[ "$version" =~ (alpha|beta|rc) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

        echo "Releasing version: $version"

    - name: Validate version format
      run: |
        version="${{ steps.version.outputs.version }}"
        if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "‚ùå Invalid version format: $version"
          echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
          exit 1
        fi

    - name: Check if version exists
      run: |
        version="${{ steps.version.outputs.version }}"
        if git tag | grep -q "^$version$"; then
          echo "‚ùå Version $version already exists"
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Install dependencies
      run: uv sync --dev

    - name: Run full test suite
      run: |
        echo "üß™ Running full test suite before release..."
        uv run python manage.py test --settings=core.test_settings --parallel auto

    - name: Run code quality checks
      run: |
        echo "üîç Running code quality checks..."
        uv run ruff check .
        uv run ruff format --check .
        uv run mypy .

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        version="${{ needs.validate-release.outputs.version }}"
        previous_tag=$(git tag -l "v*" --sort=-version:refname | head -2 | tail -1)

        echo "Generating changelog from $previous_tag to $version"

        # Generate changelog
        changelog="## What's Changed\n\n"

        # Get commits since last tag
        if [ -n "$previous_tag" ]; then
          commits=$(git log --oneline "$previous_tag..HEAD" --pretty=format:"* %s (%h)")
        else
          commits=$(git log --oneline --pretty=format:"* %s (%h)")
        fi

        # Categorize commits by type
        features=""
        fixes=""
        docs=""
        chores=""
        others=""

        while IFS= read -r commit; do
          if [[ "$commit" =~ ^.*feat(\(.+\))?: ]]; then
            features="$features\n$commit"
          elif [[ "$commit" =~ ^.*fix(\(.+\))?: ]]; then
            fixes="$fixes\n$commit"
          elif [[ "$commit" =~ ^.*docs(\(.+\))?: ]]; then
            docs="$docs\n$commit"
          elif [[ "$commit" =~ ^.*(chore|ci|build)(\(.+\))?: ]]; then
            chores="$chores\n$commit"
          else
            others="$others\n$commit"
          fi
        done <<< "$commits"

        # Build changelog sections
        if [ -n "$features" ]; then
          changelog="$changelog### üöÄ Features\n$features\n\n"
        fi

        if [ -n "$fixes" ]; then
          changelog="$changelog### üêõ Bug Fixes\n$fixes\n\n"
        fi

        if [ -n "$docs" ]; then
          changelog="$changelog### üìö Documentation\n$docs\n\n"
        fi

        if [ -n "$others" ]; then
          changelog="$changelog### üîÑ Other Changes\n$others\n\n"
        fi

        if [ -n "$chores" ]; then
          changelog="$changelog### üßπ Maintenance\n$chores\n\n"
        fi

        # Add Docker image info
        changelog="$changelog### üì¶ Docker Image\n\n"
        changelog="$changelog\`\`\`bash\n"
        changelog="$changelog# Pull the Docker image\n"
        changelog="$changelog docker pull ghcr.io/${{ github.repository }}:$version\n"
        changelog="$changelog\`\`\`\n\n"

        # Save changelog to file
        echo -e "$changelog" > CHANGELOG.md

        # Set output for GitHub release
        {
          echo 'changelog<<EOF'
          echo -e "$changelog"
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: ${{ needs.validate-release.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

    - name: Upload Release Assets
      run: |
        echo "üì¶ Release assets would be uploaded here"
        # Add any release assets like built packages, documentation, etc.

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying ${{ needs.validate-release.outputs.version }} to staging"
        echo "Image: ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}"
        # Add actual deployment commands here

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging"
        # Add smoke tests here

    - name: Notify deployment
      run: |
        echo "‚úÖ Successfully deployed to staging"
        # Add notification logic (Slack, email, etc.)

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for critical vulnerabilities
      run: |
        echo "üîí Checking release image for critical vulnerabilities..."
        docker run --rm \
          aquasec/trivy:latest image \
          --exit-code 1 \
          --severity CRITICAL \
          --format table \
          "ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}"

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish, create-release, deploy-staging, security-scan-release]
    if: always()

    steps:
    - name: Release Summary
      run: |
        echo "üéâ Release Summary for ${{ needs.validate-release.outputs.version }}"
        echo "============================================"
        echo "Validation: ${{ needs.validate-release.result }}"
        echo "Build & Publish: ${{ needs.build-and-publish.result }}"
        echo "GitHub Release: ${{ needs.create-release.result }}"
        echo "Staging Deploy: ${{ needs.deploy-staging.result }}"
        echo "Security Scan: ${{ needs.security-scan-release.result }}"

        if [[ "${{ needs.validate-release.result }}" == "success" &&
              "${{ needs.build-and-publish.result }}" == "success" &&
              "${{ needs.create-release.result }}" == "success" ]]; then
          echo "‚úÖ Release completed successfully!"
          echo "üê≥ Docker Image: ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}"
        else
          echo "‚ùå Release failed. Please check the logs."
          exit 1
        fi
